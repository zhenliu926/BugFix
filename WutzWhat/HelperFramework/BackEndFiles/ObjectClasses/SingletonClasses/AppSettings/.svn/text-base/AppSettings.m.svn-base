//
//  AppSettings.m
//  AppSettings
//
//  Created by uk on 12/13/11.
//  Copyright (c) 2011 __MyCompanyName__. All rights reserved.
//

#import "AppSettings.h"
#import "Constants.h"
#include <CommonCrypto/CommonDigest.h>
#import "LookUpFetcher.h"
#import "ProfileFetcher.h"
#define kURL @"http://ozitechnology.com/swella/service/Controller.php?request=Users&action="
#define kURLImage @"http://ozitechnology.com/swella/"

static AppSettings *singletonInstance; 
@implementation AppSettings
@dynamic baseAddress;
@synthesize genderLookUp,languageLookUp;
@synthesize healthConcernsLookUp,healthGoalLookUp,bodyPartsLookUp,therapyLookUp,polPreferencesLookUp,regPreferencesLookUp;
@synthesize otherInterestsLookUp,creditCardTypeLookUp,therapySpecialityLookUp;
@synthesize lookUpDictionary,delegate,segmentBarColor,facebook;
@synthesize mapProviderDictionary,clientCalendarDictionary,providerCalendarDictionary;
@synthesize healthConditionId;

#pragma mark - AppSettings class lifeCycle
- (id) init {
    if (self = [super init]) {

        lookUpDictionary = [[NSMutableDictionary alloc] init];
        
        [lookUpDictionary setObject:[[NSMutableDictionary alloc] init] forKey:LOOKUP_TYPE_GENDER];
        [lookUpDictionary setObject:[[NSMutableDictionary alloc] init] forKey:LOOKUP_TYPE_LANGUAGE];
        [lookUpDictionary setObject:[[NSMutableDictionary alloc] init] forKey:LOOKUP_TYPE_HEALTH_GOAL];
        [lookUpDictionary setObject:[[NSMutableDictionary alloc] init] forKey:LOOKUP_TYPE_HEALTH_CONCERN];
        [lookUpDictionary setObject:[[NSMutableDictionary alloc] init] forKey:LOOKUP_TYPE_THERAPY_GOAL];
        [lookUpDictionary setObject:[[NSMutableDictionary alloc] init] forKey:WEB_METHOD_GET_BODY_PARTS];
        [lookUpDictionary setObject:[[NSMutableDictionary alloc] init] forKey:LOOKUP_TYPE_OTHER_INTEREST];
        [lookUpDictionary setObject:[[NSMutableDictionary alloc] init] forKey:LOOKUP_TYPE_REG_PREFERENCE];
        [lookUpDictionary setObject:[[NSMutableDictionary alloc] init] forKey:LOOKUP_TYPE_POL_PREFERENCE];
        [lookUpDictionary setObject:[[NSMutableDictionary alloc] init] forKey:LOOKUP_TYPE_CREDIT_CARD_TYPE];
        [lookUpDictionary setObject:[[NSMutableDictionary alloc] init] forKey:LOOKUP_TYPE_THERAPY_SPECIALTY];
        [lookUpDictionary setObject:[[NSMutableDictionary alloc] init] forKey:LOOKUP_TYPE_TREATMENT];
        //[lookUpDictionary setObject:[[NSMutableDictionary alloc] init] forKey:WEB_METHOD_GET_FILES];
        [self setSegmentBarColor:[UIColor colorWithRed:175/255.f green:215/255.f blue:255/255.f alpha:1.0f]];
        
        }
    return self;
}
+ (AppSettings*)instance{
    if(!singletonInstance)
        singletonInstance=[[AppSettings alloc]init];
    
    return singletonInstance;
}
- (void)dealloc{
    [super dealloc];
}

#pragma mark - WebServices urls
- (NSString *)getBaseAddressOfType:(NSString *)requestType{
    return [NSString stringWithFormat:@"%@?%@=%@&%@=",WEBSERVICE_URL,WEB_REQUEST,requestType,WEB_ACTION];
    //return [NSString stringWithFormat:@"%@",kURL];
}

- (NSString *)getLookupBaseAddress{
    return [NSString stringWithFormat:@"%@?%@=%@&%@=",WEBSERVICE_URL,WEB_REQUEST,WEB_REQUEST_GENERAL,WEB_ACTION];
    //return [NSString stringWithFormat:@"%@",kURL];
}

- (NSString *) getImageBaseAddress{
	return [NSString stringWithFormat:@"%@",kURLImage];
}

#pragma mark - Token
- (NSString *) getMD5Token:(NSString*) input
{

    input = [NSString stringWithFormat:@"%@%@",input,MD5_SALT];
    NSData *rdata;
    NSData* data=[input dataUsingEncoding: [NSString defaultCStringEncoding] ];
    unsigned char hashBytes[CC_MD5_DIGEST_LENGTH];
    CC_MD5([data bytes], [data length], hashBytes);
    rdata = [NSData dataWithBytes:hashBytes length:CC_MD5_DIGEST_LENGTH];
    
    NSMutableString *token = [NSMutableString stringWithCapacity:CC_MD5_DIGEST_LENGTH*2];
    for(int i = 0; i<CC_MD5_DIGEST_LENGTH; i++) {
        [token appendFormat:@"%02x",hashBytes[i]];
    }
    
    NSLog(@"%@",token);
    //"UUID," + "C/P," + ret 
    
    return  token;
}

#pragma mark - Whole Application Message handling
- (NSString *) getMsgStatus:(NSDictionary *)dataDictFromServer
{
    NSString *errorMsg = nil;
    
    
    if ([[dataDictFromServer objectForKey:ERROR]isEqualToString:ERRORCODE_MINUS_THREE]) {
        errorMsg = SERVER_ERROR_CODE_NO_RECORD;
    }

    else if ([[dataDictFromServer objectForKey:ERROR]isEqualToString:ERRORCODE_MINUS_TWO]) {
        errorMsg = MSG_AUTH_FAIL;
    }
    else if ([[dataDictFromServer objectForKey:ERROR]isEqualToString:ERRORCODE_MINUS_ONE]) {
        errorMsg = MSG_SERVER_ERROR;
    }
    else if ([[dataDictFromServer objectForKey:ERROR]isEqualToString:ERRORCODE_TWO]) {
        errorMsg = MSG_DUPLICATE_DATA;
    }
    
    else if ([[dataDictFromServer objectForKey:ERROR]isEqualToString:ERRORCODE_THREE]) {
        errorMsg = MSG_USER_NOT_FOUND;
    }
    else if ([[dataDictFromServer objectForKey:ERROR]isEqualToString:ERRORCODE_FOUR]) {
        errorMsg = ACCOUNT_ALREADY_ACTIVATED;
    }
    else if ([[dataDictFromServer objectForKey:ERROR]isEqualToString:ERRORCODE_FIVE]) {
        errorMsg = SERVER_ERROR_CODE_NO_FILES;
    }
    else if ([[dataDictFromServer objectForKey:ERROR]isEqualToString:ERRORCODE_SIX]) {
        errorMsg = SERVER_ERROR_CODE_LIMIT_ECXEED;
    }

    else
    {
        errorMsg = ERRORCODE_ZERO;		
    }
    
    return errorMsg;
}

- (void) emptyFieldMsg:(NSMutableArray *)params
{
    NSString *msg = @"";
    
    for (int i=0; i<params.count; i++) {
        msg = [NSString stringWithFormat:@"%@\n%@",msg,[params objectAtIndex:i]];
    }

    UIAlertView *alertView = [[UIAlertView alloc]initWithTitle:MSG_EMPTY_VALUE 
                                                       message:msg
                                                      delegate:nil 
                                             cancelButtonTitle:KEY_STATUS_OK 
                                             otherButtonTitles: nil];
    [alertView show];
    [alertView release];
}

- (void) showNetworkMsg
{
    UIAlertView *alertView = [[UIAlertView alloc]initWithTitle:APP_TITLE 
                                                       message:MSG_NO_INTERNET_CONNECTIVITY
                                                      delegate:nil 
                                             cancelButtonTitle:KEY_STATUS_OK 
                                             otherButtonTitles: nil];
    [alertView show];
    [alertView release];
}

#pragma mark Signup lookups
- (void) populateAllSignupLookups
{
    [self callGenericLookups:LOOKUP_TYPE_GENDER];
    [self callGenericLookups:LOOKUP_TYPE_THERAPY_SPECIALTY];
    [self callGenericLookups:LOOKUP_TYPE_LANGUAGE];
}

#pragma mark Client Profile lookups
- (void) populateAllClientBasicProfileLookups
{
    [self callGenericLookups:LOOKUP_TYPE_GENDER];
    [self callGenericLookups:LOOKUP_TYPE_HEALTH_GOAL];
    [self callGenericLookups:LOOKUP_TYPE_THERAPY_GOAL];
    [self callGenericLookups:WEB_METHOD_GET_BODY_PARTS];
}

- (void) populateAllClientAdvanceProfileLookups
{
    [self callGenericLookups:LOOKUP_TYPE_OTHER_INTEREST];
    [self callGenericLookups:LOOKUP_TYPE_POL_PREFERENCE];
    [self callGenericLookups:LOOKUP_TYPE_REG_PREFERENCE];
    //[self callGenericLookups:WEB_METHOD_GET_FILES];    
}

- (void) populateAllClientPaymentProfileLookups
{
    [self callGenericLookups:LOOKUP_TYPE_CREDIT_CARD_TYPE];
}

#pragma mark Provider Profile lookups
- (void) populateAllProviderBasicProfileLookups
{
    [self callGenericLookups:LOOKUP_TYPE_GENDER];
    [self callGenericLookups:LOOKUP_TYPE_LANGUAGE];
    [self callGenericLookups:LOOKUP_TYPE_THERAPY_SPECIALTY];
}

- (void) populateAllProviderAdvanceProfileLookups
{
    [self callGenericLookups:LOOKUP_TYPE_OTHER_INTEREST];
    [self callGenericLookups:LOOKUP_TYPE_POL_PREFERENCE];
    [self callGenericLookups:LOOKUP_TYPE_REG_PREFERENCE];
}

- (void) populateAllProviderPaymentProfileLookups
{
    [self callGenericLookups:LOOKUP_TYPE_CREDIT_CARD_TYPE];
}

- (void) populateAllProviderPriceProfileLookups
{
    [self callGenericLookups:WEB_METHOD_GET_BODY_PARTS];
    [self callGenericLookups:LOOKUP_TYPE_TREATMENT];
}

-(void)calBodyPartLookups
{
    [self callGenericLookups:WEB_METHOD_GET_BODY_PARTS];
}

#pragma mark generic lookup
- (void) callGenericLookups:(NSString*)lookupName
{
    
    NSMutableDictionary *params = [NSMutableDictionary dictionaryWithObject:lookupName forKey:JSON_LOOKUP_LOOKUP_NAME];
    LookUpFetcher *fetcher = [LookUpFetcher new];
    LookUpFetcherCompletion lookupCompletion = ^(NSDictionary *lookupInfoDict){
        
		AppSettings *settings = [AppSettings instance];
        NSString *status = [settings getMsgStatus:lookupInfoDict];    
        
        if (![status isEqualToString:ERRORCODE_ZERO] && ![status isEqualToString:SERVER_ERROR_CODE_NO_RECORD] ) {
            
            UIAlertView *alertView = [[UIAlertView alloc]initWithTitle:APP_TITLE 
                                                               message:status 
                                                              delegate:nil 
                                                     cancelButtonTitle:KEY_STATUS_OK 
                                                     otherButtonTitles: nil];
            [alertView show];
            [alertView release];
            return;
		}
		
        NSLog(@"lookName=%@ and lookDict=%@",lookupName,lookupInfoDict);
        NSMutableDictionary *dataDict = [[NSMutableDictionary alloc] init]; 
        NSMutableDictionary *data = [lookupInfoDict objectForKey:WEB_DATA];
                
        /*if([lookupName isEqualToString:LOOKUP_TYPE_GENDER])
        *///settings.genderLookUp = [[NSMutableDictionary alloc] init];
        for (NSMutableDictionary *dict in data){
            //[dataArray addObject:[dict valueForKey:JSON_LOOKUP_LOOKUP_NAME]];
            
            if ([lookupName isEqualToString:WEB_METHOD_GET_BODY_PARTS]) {            
            [dataDict setObject:[dict valueForKey:JSON_BODY_PART_ID] forKey:[dict valueForKey:JSON_BODY_PART_NAME]] ;    
            }
            else
            [dataDict setObject:[dict valueForKey:JSON_LOOKUP_LOOKUP_ID] forKey:[dict valueForKey:JSON_LOOKUP_LOOKUP_NAME]] ;
        }
       
        if ([lookupName isEqualToString:WEB_METHOD_GET_BODY_PARTS] || [lookupName isEqualToString:LOOKUP_TYPE_HEALTH_CONCERN])
        {
         [dataDict setObject:@"0" forKey:@"--Please Select--"] ;       
        }
        
        [[self lookUpDictionary] setObject:dataDict forKey:lookupName];
        [dataDict release];
        
        if (([lookupName isEqualToString:LOOKUP_TYPE_HEALTH_CONCERN ] || [lookupName isEqualToString:LOOKUP_TYPE_TREATMENT ])  && delegate!=nil) {
            if ([delegate respondsToSelector:@selector(lookUpDataDelegate:)]) {
                [delegate lookUpDataDelegate:nil];
            }
        }
        if ([lookupName isEqualToString:WEB_METHOD_GET_BODY_PARTS] && delegate!=nil) {
            if ([delegate respondsToSelector:@selector(lookUpBodyPartDelegate:)]) {
                [delegate lookUpBodyPartDelegate:nil];
            }
        }
        //move to Profile Screen
    };
    LookUpFetcherError lookupError = ^(NSError *error){
		
        NSLog(@"%@",error);
    };
    
	 if ([lookupName isEqualToString:WEB_METHOD_GET_BODY_PARTS])
    [fetcher lookupBodyPartsWithParams:params completionBlock:lookupCompletion errorBlock:lookupError];
    else
    [fetcher lookupWithParams:params completionBlock:lookupCompletion errorBlock:lookupError];
}

- (void) lookUpConditions:(NSString *)lookUpName optionalHealthCorcerns:(NSString*)healthCorcern andBodyPart:(NSString*)bodyPart
            andScreenTite:(NSString*)screenTitle
{
    NSLog(@"lookUpConditions");
    NSUserDefaults *userDefaults = [NSUserDefaults standardUserDefaults];
    NSMutableDictionary *userInfo = [userDefaults objectForKey:@"LoggedInInfo"];
    [userDefaults synchronize];
    
    NSString *tokenFromServer = [userInfo objectForKey:WEB_TOKEN];
    NSLog(@"tokenFromServer=%@",tokenFromServer);
    
    NSString *md5Token = [self getMD5Token:tokenFromServer];
    
    NSMutableDictionary *data = [userInfo objectForKey:WEB_DATA];
    
    NSString *tokenSendToServer = nil;
    if (  ((NSString*)[data valueForKey:JSON_CLIENT_ID]).length != 0 ) {
        tokenSendToServer = [NSString stringWithFormat:@"%@,%@,%@",(NSString*)[data valueForKey:JSON_CLIENT_ID],LOGGED_BY_CLIENT,md5Token];
    }
    else
        tokenSendToServer = [NSString stringWithFormat:@"%@,%@,%@",(NSString*)[data valueForKey:JSON_PROVIDER_ID],LOGGED_BY_PROVIDER,md5Token];
    
    NSLog(@"tokenSendToServer=%@",tokenSendToServer);
    
    NSMutableDictionary *dataDict = [[NSMutableDictionary alloc] init];
    [dataDict setObject:bodyPart forKey:WEB_DATA];
    [dataDict setObject:WEB_REQUEST_GENERAL forKey:WEB_REQUEST];
    
    NSMutableDictionary *params = [NSMutableDictionary  dictionaryWithObjects:
                                   [NSArray arrayWithObjects:
                                    
                                    dataDict,
                                    tokenSendToServer,
                                    nil]
                                                                      forKeys:[NSArray arrayWithObjects:WEB_DATA,WEB_TOKEN,nil]];
    
    [dataDict release];
    ProfileFetcher *fetcher = [ProfileFetcher new];
    ProfileFetcherCompletion lookupCompletion = ^(NSDictionary *lookupInfoDict){
        
        
        NSString *status = [self getMsgStatus:lookupInfoDict];    
        
        if (![status isEqualToString:ERRORCODE_ZERO]) {
            
            UIAlertView *alertView = [[UIAlertView alloc]initWithTitle:APP_TITLE 
                                                               message:status 
                                                              delegate:nil 
                                                     cancelButtonTitle:KEY_STATUS_OK 
                                                     otherButtonTitles: nil];
            [alertView show];
            [alertView release];
        }
        
        NSLog(@"%@",lookupInfoDict);
        
        
        NSMutableDictionary *data = [lookupInfoDict objectForKey:WEB_DATA];
        NSMutableDictionary *dataDict = [[NSMutableDictionary alloc] init];
        for (NSMutableDictionary *dict in data){
            [dataDict setObject:[dict valueForKey:JSON_CONDITIONS_ID] forKey:[dict valueForKey:JSON_CONDITIONS_NAME]] ;    
        }
        
        [[self lookUpDictionary] setObject:dataDict forKey:lookUpName];
        [dataDict release];
        
        if (delegate!=nil && [delegate respondsToSelector:@selector(lookUpDataDelegate:)]) {
            [delegate lookUpDataDelegate:nil];
        }
        
        //move to Profile Screen
    };
    ProfileFetcherError lookupError = ^(NSError *error){
        
        NSLog(@"%@",error);
    };
    
    //[fetcher SignUpWithParams:params completionBlock:basicProfileCompletion errorBlock:signUpError];
    //[fetcher lookupBodyPartsWithParams:params completionBlock:lookupCompletion errorBlock:lookupError];
    [fetcher getConditionsWithParams:params completionBlock:lookupCompletion errorBlock:lookupError];
    
}

-(NSString*) nullCheck:(NSString *)str{
    if ([str isKindOfClass:[NSNull class]] || [str isEqualToString:@"(null)"] || str==nil) {
        str = @"";
    }
    NSLog(@"str=%@",str);
    return str;
}
-(NSString*) nullCheckForInteger:(NSString *)str{
    if ([str isKindOfClass:[NSNumber class]]) {
        if (str == nil) {
            str = @"0";
        }
    }
    else if ([str isKindOfClass:[NSNull class]] || [str isEqualToString:@"(null)"] || str==nil || [str isEqualToString:@""] || [str isEqualToString:@"--Please Select--"]) {
        str = @"0";
    }
    NSLog(@"str=%@",str);
    return str;
}
-(NSString*) nullCheckForFloat:(NSString *)str{
    if ([str isKindOfClass:[NSNull class]] || [str isEqualToString:@"(null)"] || str==nil) {
        str = @"0.0";
    }
    NSLog(@"str=%@",str);
    return str;
}
-(BOOL) emailValidation:(NSString *)email {
    NSString *emailRegex = //@"^([A-Za-z0-9_\\.])+\\@([A-Za-z0-9_\\.])+\\.([A-Za-z]{2,4})";//@"[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,4}"; 
    @"[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,4}";
    
    NSPredicate *emailTest = [NSPredicate predicateWithFormat:@"SELF MATCHES %@", emailRegex]; 
    
    return [emailTest evaluateWithObject:email];
}
-(BOOL) validatePhoneWithString:(NSString *)phone{
    NSString *str = @"(([+]{1}|[0]{2}){0,1}+[1]{1}){0,1}+[ ]{0,1}+(?:[-( ]{0,1}[0-9]{3}[-) ]{0,1}){0,1}+[ ]{0,1}+[0-9]{2,3}+[0-9- ]{4,8}";
    //NSString *str = @"^[\\+\\- \\d]+";
    NSPredicate *no = [NSPredicate predicateWithFormat:@"SELF MATCHES %@",str];
    return [no evaluateWithObject:phone];
}
-(BOOL) nameValidation:(NSString*)name{
    //^[A-Za-z]+
    NSString *str = @"^[A-Za-z ]+";
    NSPredicate *no = [NSPredicate predicateWithFormat:@"SELF MATCHES %@",str];
    return [no evaluateWithObject:name];
}
-(BOOL) passwordValidation:(NSString*)password{
    //[^\\ ]+
    NSString *str = @"[^ ]+";
    NSPredicate *no = [NSPredicate predicateWithFormat:@"SELF MATCHES %@",str];
    return [no evaluateWithObject:password];
}
-(BOOL) ccNoValidation:(NSString*)CCNo{
    //[^\\ ]+
    NSString *str = @"^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11})$";
    
    NSPredicate *no = [NSPredicate predicateWithFormat:@"SELF MATCHES %@",str];
    return [no evaluateWithObject:CCNo];
}
-(BOOL) issueDateValidation:(NSString*)issueDate{
    //[^\\ ]+
    NSString *str = @"^(0[1-9]|1[012])/\\d\\d$";
    NSPredicate *no = [NSPredicate predicateWithFormat:@"SELF MATCHES %@",str];
    return [no evaluateWithObject:issueDate];
}
-(BOOL) expireDateValidation:(NSString*)expireDate{
    //[^\\ ]+
    NSString *str = @"^(0[1-9]|1[012])-\\d\\d\\d\\d$";
    NSPredicate *no = [NSPredicate predicateWithFormat:@"SELF MATCHES %@",str];
    return [no evaluateWithObject:expireDate];
}
-(BOOL) phoneValidation:(NSString*)phone{
  
                   //[^\\ ]+
    NSString *str = @"^(0[1-9]|1[012])/\\d\\d$";
    NSPredicate *no = [NSPredicate predicateWithFormat:@"SELF MATCHES %@",str];
    return [no evaluateWithObject:phone];
}
-(BOOL) websiteValidation:(NSString*)website{
    //[^\\ ]+
    NSString *str = @"(\\w+):\\/\\/([\\w@][\\w.:@]+)\\/?[\\w\\.?=%&=\\-@/$,]*";
    NSPredicate *no = [NSPredicate predicateWithFormat:@"SELF MATCHES %@",str];
    return [no evaluateWithObject:website];
}
-(BOOL) ageValidation:(NSString*)agee{
    NSInteger age = [agee intValue];
    if (age < 14 || age > 120) {
        return NO;
    }
    return  YES;
}
-(BOOL) floatValueValidation:(NSString*)floatVal{
    NSString *str = @"^[-+]?[0-9]*\\.?[0-9]+$";
    NSPredicate *no = [NSPredicate predicateWithFormat:@"SELF MATCHES %@",str];
    return [no evaluateWithObject:floatVal];

}

@end
